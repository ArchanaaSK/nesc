#!/usr/bin/perl

$NESCDIR = "$ENV{HOME}/work/new-nest/nesc";
$ENV{PATH}= "$NESCDIR/src:$ENV{PATH}";
push @INC, "$NESCDIR/tools";

for (@ARGV) {
    if (/^-/) {
	if (/^-fnesc-path=/) {
	    $nesc_path = $_;
	}
	elsif (/^-java-classname=(.*)$/) {
	    $java_classname = $1;
	}
	elsif (/^-java-extends=(.*)$/) {
	    $java_extends = $1;
	}
	else {
	    &usage("unknown option $_");
	}
    }
    else {
	&usage(0) if defined($message_type);
	$message_type = $_ if defined($cfile) && !defined($message_type);
	$cfile = $_ if defined($target) && !defined($cfile);
	$target = $_ if !defined($target);
    }
}
&usage("no target specified") if !defined($target);
&usage("no message format file specified") if !defined($cfile);
&usage("no message specified") if !defined($message_type);

@args = ("nesc1", "-fnesc-msg=$message_type", "-mmcu=atmega103", $cfile);
push @args, $nesc_path if defined($nesc_path);
print STDERR join(" ", @args), "\n";
open(NESC, '-|', join(" ", @args)) or die "nesc1 not found";
@lines = <NESC>;
close NESC;

if ($?) {
    print STDERR "failed to parse message file $cfile\n";
    exit 1;
}

require "gen$target.pm";
&gen($classname, @lines);

sub usage()
{
    my ($error) = @_;

    print STDERR "$error\n\n" if $error;

    print STDERR "Usage: $0 [options] target msg-format-file message-type\n";
    print STDERR "  general options are\n";
    print STDERR "    -fnesc-path=COLON-DELIMITED-PATH  Select nesC path\n\n";
    print STDERR "  target specific options are\n";
    print STDERR "    java:\n";
    print STDERR "      -java-classname=FULL-CLASS-NAME Select class name (required)\n";
    print STDERR "      -java-extends=CLASS-NAME        Select class to extend\n";
    print STDERR "                                      (default net.tinyos.message.Message)\n";
    exit 2;
}
