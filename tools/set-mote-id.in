#!@pathperl@
#
# This program changes the mote ID of a TinyOS image. It is used to 
# install a program for a specific mote.


use strict;
my $lma ;
my $vma ;
my $addr_addr;
my $srecin = $ARGV[0];
my $exein = $srecin;
$exein =~ s/\.srec$/.exe/;
my $srecout = $ARGV[1];
my $MOTE_ADDRESS = $ARGV[2] % 65536;
open(SECTS, "avr-objdump -h $exein | grep data|") or die "Cannot extract section information";

while(<SECTS>) {
  my @datainf = split / +/;
#  print "Section: " . $datainf[2] . " VMA: ". $datainf[4]." LMA: " . $datainf[5]. "\n";
  $vma = hex($datainf[4]);
  $lma = hex($datainf[5]);
}

close(SECTS);

open(SYMBOL, "avr-objdump -t $exein | grep TOS_LOCAL_ADDRESS|") or die "Cannot extract symbol information";

while(<SYMBOL>) {
  my @syminf = split / +/;
  $addr_addr = hex($syminf[0]);
}

close(SYMBOL);
open (SREC_IN, "$srecin") or die "Srec file not found"; 
open (SREC_OUT, ">$srecout") or die "Cannot create an output file";
while(<SREC_IN>){
    my $type = substr($_, 1, 1); #type of record is second byte
    my $len_bytes = 0;
    my $record_start_byte = 0;

    if ($type == '1') { #record type 1 -- length is 2 bytes (4 chars)
	$len_bytes = 2;
	$record_start_byte = 8;
    } elsif ($type == '2') { #record type 2 -- length is 3 bytes
	$len_bytes = 3;
	$record_start_byte = 10;
    } else {  #unknown record type
	print SREC_OUT;
	next;
    }

    #we've got a type 1 or type 2 record
    #fetch the address from the record
  my $line = hex(substr($_, 4, $len_bytes * 2)); #2 chars per byte
  if ($line == $lma) {
      
      #fetch the length from the record, subtracting
      #the length of the address and type bytes 
    my $len = hex(substr($_, 2,2))-($len_bytes + 1);
    if ($len < ($addr_addr - $vma)) {
      print "This should not have happened!";
      $vma += $len;
      $lma += $len;
      print SREC_OUT;
    } else {
      my $st = $record_start_byte + 2 * ($addr_addr - $vma); 
      #my $sym = hex(substr($_, $st, 2)); 
      #my $csum = hex(substr($_, -4)) + $sym - $MOTE_ADDRESS;

      my $sym_lo = hex(substr($_, $st, 2)); 
      my $sym_hi = hex(substr($_, $st+2, 2)); 
      my $sym = $sym_hi * 256 +$sym_lo;
      my $moteaddr_lo = $MOTE_ADDRESS % 256;
      my $moteaddr_hi = ($MOTE_ADDRESS / 256) %256;
      my $csum = (hex(substr($_, -4,2)) + $sym_lo + $sym_hi - $moteaddr_lo - $moteaddr_hi) & 0xff;
      
      print SREC_OUT substr($_, 0, $st);
      print SREC_OUT uc(sprintf("%02x", $moteaddr_lo));
      print SREC_OUT uc(sprintf("%02x", $moteaddr_hi));
      print SREC_OUT substr($_, $st+4, 2*($len-($addr_addr - $vma) -2));
      print SREC_OUT substr(uc(sprintf("%02x",$csum)), -2).substr($_, -2);
    }
  } else {
    print SREC_OUT;
  }
    
}
