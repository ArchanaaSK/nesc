#!/usr/bin/perl
# This file is part of the nesC compiler.
#    Copyright (C) 2002 Intel Corporation
# 
# The attached "nesC" software is provided to you under the terms and
# conditions of the GNU General Public License Version 2 as published by the
# Free Software Foundation.
# 
# nesC is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with nesC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

use File::Basename;

for ($i = 0; $i <= $#ARGV; $i++) {
    $_ = $ARGV[$i];

    if (/^-/) {
	$nocompile = 1 if ($_ eq "-fsyntax-only");
	if (/^-[WwvpfmD]/ || /^-pedantic/ || /^-ansi/) {
	    push @nesc_args, $_ unless /^-fnesc-.*cfile=/;
	    $target = $1 if /^-fnesc-target=(.*)/;
	    $verbose = 1 if /^-v/;
	}

	if (/^-I/) {
	    ($i, $idir) = &extractarg($i);
	    push @nesc_args, "-I$idir";
	}
	elsif (/^-o/) {
	    ($i, $objtarget) = &extractarg($i);
	}
	elsif (/^-S/) {
	    $asmonly = 1;
	}
	elsif (/^-fnesc-/) {
	    if (/^-fnesc-cfile=(.*)$/) {
		$ctarget = $1;
	    }
	    if (/^-fnesc-tmpcfile=(.*)$/) {
		$ctarget = $1;
		$delcfile = 1;
	    }
	}
	elsif (!(/^-D/)) {
	    push @gcc_args, $_;
	}
    }
    else {
	if ($source ne "") {
	    printf STDERR "two source files specified ($source and $_)\n";
	    exit 2;
	}
	$source = $_;
    }
}

$target = "pc" if !defined($target);

if ($source eq "") {
    printf STDERR "no source file specified\n";
    exit 2;
}


if ($ctarget eq "") {
    # not a good choice, but we're normally invoked via gcc which gives 
    # us a -fnesc-cfile= option
    $ctarget = "/tmp/nesc.$$.c";
    $delcfile = 1;
}

if ($objtarget eq "") {
    $objtarget = $source;
    $objtarget =~ s/\.td$/.o/ unless $asmonly;
    $objtarget =~ s/\.td$/.s/ if $asmonly;
}

push @nesc_args, "-fnesc-no-debug" if $target eq "avr";
push @nesc_args, $source;
push @nesc_args, "-o";
if ($nocompile) {
    push @nesc_args, "/dev/null";
} else {
    push @nesc_args, $ctarget;
}
unshift @nesc_args, "nesc1";

print STDERR join(" ", @nesc_args), "\n" if $verbose;
&vsystem(@nesc_args);
if ($? != 0) {
    unlink $ctarget;
    exit 2;
}
exit 0 if $nocompile;

if ($target eq "avr") {
    $asmtarget1 = $ctarget;
    $asmtarget1 =~ s/\.c$/.s/;

    $asmtarget2 = $objtarget;
    $asmtarget2 =~ s/\.o$/.s/ unless $asmonly;

    push @gcc_args, "-o";
    push @gcc_args, $asmtarget1;
    push @gcc_args, "-S";
    push @gcc_args, $ctarget;
    unshift @gcc_args, "avr-gcc";
    &vsystem(@gcc_args);
    unlink $ctarget if $delcfile;
    if ($? != 0) {
	unlink $asmtarget1;
	exit 2;
    }
    print STDERR "sed -e 's/\\\$/./g' $asmtarget1 > $asmtarget2\n" if $verbose;
    open(SED, $asmtarget1);
    open(OSED, ">$asmtarget2");
    while (<SED>) {
	s/\$/./g;
	print OSED;
    }
    close SED;
    close OSED;
    unlink $asmtarget1;
    unless ($asmonly) {
	&vsystem("avr-as", "-o", $objtarget, $asmtarget2);
	unlink $asmtarget2;
    }
}
else {
    push @gcc_args, "-o";
    push @gcc_args, $objtarget;
    push @gcc_args, "-S" if $asmonly;
    push @gcc_args, "-c" unless $asmonly;
    push @gcc_args, $ctarget;
    unshift @gcc_args, "gcc";
    &vsystem(@gcc_args);
    unlink $ctarget if $delcfile;
}

exit 2 if $?;
exit 0;

sub vsystem() {
    print STDERR join(" ", @_), "\n" if $verbose;
    system @_;
}

sub extractarg {
    my ($i) = @_;

    if (length($ARGV[$i]) == 2) {
	return &nextarg($i);
    }
    else {
	$arg = substr($ARGV[$i], 2);
	return ($i, $arg);
    }
}

sub nextarg {
    my ($i) = @_;

    if ($i < $#ARGV) {
	$arg = $ARGV[++$i];
    }
    else {
	printf STDERR "missing argument to $ARGV[$i]\n";
	exit 2;
    }
    return ($i, $arg);
}

